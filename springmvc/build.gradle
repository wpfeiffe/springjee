apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'eclipse'

configurations {
    provided
}

sourceSets.main.compileClasspath += [configurations.provided]
sourceSets {
    integrationTest {
        java.srcDir file('src/integration-test/java')
        groovy.srcDir file('src/integration-test/groovy')
        resources.srcDir file('src/integration-test/resources')
    }
}

repositories {
    mavenCentral()
}

// The drivers we want to use
ext.drivers = ["chrome"]

dependencies {

    provided "org.jboss.spec:jboss-javaee-6.0:$jbossJavaeeVersion"

    compile "org.codehaus.groovy:groovy:$groovyVersion"
    compile "org.springframework:spring-webmvc:$springCoreVersion"
    compile "org.springframework:spring-web:$springCoreVersion"
    compile "org.springframework.security:spring-security-core:$springSecurityVersion"
    compile "org.springframework.security:spring-security-config:$springSecurityVersion"
    compile "org.springframework.security:spring-security-web:$springSecurityVersion"
    compile "org.springframework.data:spring-data-jpa:$springDataJpaVersion"
    compile "opensymphony:sitemesh:$sitemeshVersion"
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.12"
    compile "org.infinispan:infinispan-core:$infinispanVersion"
    compile project(":ejb")

    testCompile "junit:junit:$junitVersion"
    testCompile ("org.spockframework:spock-core:$spockVersion") {
        exclude module: "groovy-all"
    }
    testCompile "org.gebish:geb-spock:$gebVersion"

    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime


    // Selenium Drivers
    drivers.each { driver ->
        testCompile "org.seleniumhq.selenium:selenium-$driver-driver:2.31.0"
    }

}

// optional: if using 'idea' plugin
idea {
  module{
    scopes.PROVIDED.plus += [configurations.provided]
  }
}

// optional: if using 'eclipse' plugin
eclipse {
  classpath {
    plusConfigurations += [configurations.provided]
  }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports.html.destination = reporting.file("$name/tests")
        reports.junitXml.destination = file("$buildDir/test-results/$name")
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        systemProperties['jar.path'] = jar.archivePath

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildï¿½
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
    }
}

task integrationTest(type: Test, dependsOn: jar) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    systemProperties['jar.path'] = jar.archivePath
}

check.dependsOn integrationTest

